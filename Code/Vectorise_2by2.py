#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import os
import numpy as np
import time
import pandas as pd
from qgis.core import QgsVectorFileWriter, QgsVectorLayer, QgsFeature, QgsGeometry, QgsPointXY, QgsCoordinateReferenceSystem, QgsWkbTypes, QgsFields, QgsField, QgsApplication
from qgis.PyQt.QtCore import QVariant





'''User inputs'''
Month='M'#2 digit month as a string
ResultsPath=''#output path
ResultsFile=''#the input csv generated by Extract_2by2.py
OutvectorName='.gpkg' #the raw output for all 2by2 squares, in gpkg format
FinalvectorName='.gpkg'#the final vector, clipped to the contours of the oceans
FineClipVector='.gpkg '#the vector file with ocean contours for clipping

    
    
def GDALpix2map(ds, x, y):
    xoffset, px_w, rot1, yoffset, rot2, px_h = ds.GetGeoTransform()
    posX = px_w * x + rot1 * y + xoffset
    posY = rot2 * x + px_h * y + yoffset
    # shift to the center of the pixel
    posX += px_w / 2.0
    posY += px_h / 2.0
    return posX, posY 

def tic():
    #Homemade version of matlab tic and toc functions

    global startTime_for_tictoc
    startTime_for_tictoc = time.time()

def toc():

    if 'startTime_for_tictoc' in globals():
        print ("Elapsed time is " + str(int(time.time() - startTime_for_tictoc)) + " seconds.")
    else:
        print ("Toc: start time not set")





'''Main'''
#get the dataframe
ClassSheet=pd.read_csv(ResultsFile)


#make the basic vector layer
fields = QgsFields()
fields.append(QgsField("RDense", QVariant.Double))
fields.append(QgsField("LDense", QVariant.Double))
fields.append(QgsField("BDense", QVariant.Double))
fields.append(QgsField("N_bars", QVariant.Double))
fields.append(QgsField("Med_Bar_Area", QVariant.Double))
fields.append(QgsField("No_Data", QVariant.Double))
fields.append(QgsField("Cloud", QVariant.Double))
fields.append(QgsField("CloudFree", QVariant.Double))
fields.append(QgsField("Name", QVariant.String))

writer = QgsVectorFileWriter(OutvectorName, "UTF-8", fields, QgsWkbTypes.Polygon, driverName="GPKG")


if writer.hasError() != QgsVectorFileWriter.NoError:
    print("Error when creating shapefile")
    
for f in range(len(ClassSheet.index)):
    if ClassSheet.Done[f]==1:
        print('Vectorising... ')
        
        #Now create a vector polygon for that GZD and add river and lake density to the atts table 
        Rdense=float(ClassSheet.River_Density[f])/1.0
        Ldense=float(ClassSheet.Lake_Density[f])/1.0
        Bdense=float(ClassSheet.Bar_Density[f])/1.0
        Nbars=float(ClassSheet.Nbar[f])/1.0
        MedianArea=float(ClassSheet.MedianBarArea[f])/1.0
        NoData=float(ClassSheet.NoPix[f])/(float(ClassSheet.NoPix[f]+ClassSheet.BackPix[f]+ClassSheet.RiverPix[f]+ClassSheet.LakePix[f]+ClassSheet.OceanPix[f]+ClassSheet.GlacialPix[f]+ClassSheet.SnowPix[f]+ClassSheet.CloudPix[f]))
        CloudData=float(ClassSheet.CloudPix[f])/(float(ClassSheet.NoPix[f]+ClassSheet.BackPix[f]+ClassSheet.RiverPix[f]+ClassSheet.LakePix[f]+ClassSheet.OceanPix[f]+ClassSheet.GlacialPix[f]+ClassSheet.SnowPix[f]+ClassSheet.CloudPix[f]))
        totalPix=float(ClassSheet.NoPix[f]+ClassSheet.BackPix[f]+ClassSheet.BarPix[f]+ClassSheet.RiverPix[f]+ClassSheet.LakePix[f]+ClassSheet.OceanPix[f]+ClassSheet.GlacialPix[f]+ClassSheet.SnowPix[f]+ClassSheet.CloudPix[f])
        LandPix=float(ClassSheet.BackPix[f]+ClassSheet.BarPix[f]+ClassSheet.RiverPix[f]+ClassSheet.LakePix[f]+ClassSheet.OceanPix[f]+ClassSheet.GlacialPix[f]+ClassSheet.SnowPix[f])
        CloudFreeData=float(100*LandPix/totalPix)
        if CloudFreeData>=20:#min 20% cloud in each 2x2
            poly = QgsFeature()
            LLx=np.float32(ClassSheet.LLx[f])
            LLy=np.float32(ClassSheet.LLy[f])
            URx=np.float32(ClassSheet.URx[f])
            URy=np.float32(ClassSheet.URy[f])
            GZDname=str(ClassSheet.Zone[f])+ClassSheet.GZD[f]
            points = [QgsPointXY(LLx,LLy),QgsPointXY(LLx,URy),QgsPointXY(URx,URy),QgsPointXY(URx, LLy)]
            poly.setGeometry(QgsGeometry.fromPolygonXY([points]))
            poly.setAttributes([Rdense,Ldense,Bdense, Nbars, MedianArea, NoData, CloudData, CloudFreeData,GZDname])#([np.float32(ClassSheet.RiverDense[f]), np.float32(ClassSheet.LakeDense[f]), GZDname])
            writer.addFeatures([poly])
            del poly




del writer

#now clip the coarse 2x2 squares to a global map of the study area
command='ogr2ogr -clipsrc '+FineClipVector+' '+FinalvectorName+' '+OutvectorName
os.system(command)





        
    
        



